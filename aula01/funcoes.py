def oi():
    print("Ol√°, Mundo!")
def saudacao(nome):
    print(f"Seja bem-vindo, {nome}")

def saudacao2(nome="Visitante"):#Voc√™ pode definir um valor padr√£o para um par√¢metro. Se nenhum valor for fornecido, o padr√£o ser√° usado.
    print(f"Seja bem-vindo, {nome}")
def soma(a,b):
    return a + b#Uma fun√ß√£o pode retornar um valor usando a palavra-chave return.
result = soma(5,3)
print(result)

multiplicacao = lambda x: x*2#As fun√ß√µes lambda s√£o fun√ß√µes an√¥nimas (sem nome) que permitem criar pequenas fun√ß√µes em apenas uma linha. Elas s√£o ideais para tarefas r√°pidas que n√£o exigem a defini√ß√£o completa de uma fun√ß√£o com def.
print(multiplicacao(5))
soma = lambda x,y: x+y
print(soma(5,8))

numeros = [1,2,3,4]
dobrado = list(map(lambda x: x * 2, numeros))#A fun√ß√£o map() aplica uma fun√ß√£o a cada item de um iter√°vel (como uma lista) e retorna um novo iter√°vel com os resultados.
print(dobrado)

Numeros = [1,2,3,4]
pares = list(filter(lambda x: x%2==0, Numeros))#A fun√ß√£o filter() cria um iter√°vel contendo apenas os itens que atendem a uma condi√ß√£o.
print(pares)

Nomes = ["Felipe", "Maria", "Joaquim"]
idades = [25,30,35]
combinado = list(zip(Nomes,idades))#A fun√ß√£o zip() combina m√∫ltiplos iter√°veis (listas, tuplas, etc.) em pares. √â como fechar o z√≠per de uma jaqueta üß•, onde os dentes de cada lado se unem.
print(combinado)

oi()
saudacao("Felippe")
saudacao2()

