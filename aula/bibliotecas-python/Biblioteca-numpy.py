'''O NumPy (Numerical Python) √© uma das bibliotecas mais populares e fundamentais para a computa√ß√£o cient√≠fica em Python. Ele fornece suporte para a manipula√ß√£o eficiente de grandes vetores, matrizes e arrays multidimensionais, al√©m de oferecer fun√ß√µes matem√°ticas de alto desempenho.
**Analogia**: Pense no NumPy como uma **calculadora cient√≠fica superpotente** üßÆ que pode manipular grandes volumes de n√∫meros de forma r√°pida e eficiente.'''

import numpy as np

lista = [1,2,3,4,5]
array = np.array(lista)
print(array)

matriz = np.array([[1,2,3], [4,5,6]])
print(matriz)


zeros = np.zeros((2,3))#np.zeros((linhas, colunas))`: Cria um array de zeros.
print(zeros)
ones = np.ones((2,3))  #np.ones((linhas, colunas))`: Cria um array de uns.
print(ones)
eye = np.eye(3) #np.eye(n)`: Cria uma matriz identidade.
print(eye)
arange = np.arange(0, 10, 2) #np.arange(in√≠cio, fim, passo)`: Cria um array com valores em um intervalo.
print(arange)

#Opera√ß√µes aritm√©ticas
#Podemos realizar opera√ß√µes aritm√©ticas diretamente nos arrays, e o NumPy aplica as opera√ß√µes a todos os elementos:
array1 = np.array([1,2,3])
array2 = np.array([4,5,6])
soma = array1 + array2
print(soma)
multiplicacao = array1 * 2
print(multiplicacao)

#Indexa√ß√£o e fatiamento
#Voc√™ pode acessar e modificar elementos de um array de forma semelhante √†s listas.
array = np.array([10,20,30,40])
print(array[1])

matriz = np.array([[1,2,3], [4,5,6]])
print(matriz[1,2])

#Fun√ß√µes estat√≠sticas
#NumPy oferece fun√ß√µes √∫teis para estat√≠sticas e an√°lise de dados:
array = np.array([1,2,3,4,5])
print((np.mean(array)))#np.mean(array): M√©dia dos elementos.
print((np.sum(array)))#np.sum(array): Soma dos elementos.
print(np.max(array))#np.max(array): Maior valor.
print(np.min(array))#np.min(array): Menor valor.
print(np.std(array))#np.std(array): Desvio padr√£o dos elementos.

#Opera√ß√µes com matrizes
#NumPy facilita a manipula√ß√£o e opera√ß√£o com matrizes, como a multiplica√ß√£o de matrizes.
matriz1 = np.array([[1,2], [3,4]])
matriz2 = np.array([[5,6], [7,8]])
resultado = np.dot(matriz1,matriz2)#np.dot() realiza a multiplica√ß√£o de matrizes e produtos escalares.
print(resultado)